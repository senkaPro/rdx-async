import { createAsyncThunk, createSlice, PayloadAction } from '@reduxjs/toolkit';
import { RootState, AppDispatch } from '../../app/store';
import { fetchColor, getColor } from './colorAPI';

export interface ColorState {
  value: string;
  status: 'idle' | 'loading' | 'failed';
}

const initialState: ColorState = {
  value: '#7DCEA0',
  status: 'idle',
};

export const changeColorAsync = createAsyncThunk(
  'color/fetchColor',
  async () => {
    const response = await fetchColor();
    // The value we return becomes the `fulfilled` action payload
    return response.data;
  }
);

export const randomColor = () =>
  (dispatch: AppDispatch) => {
    const {data} = getColor();
    dispatch(changeColor(data))
  };

export const colorSlice = createSlice({
  name: 'color',
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
    // Use the PayloadAction type to declare the contents of `action.payload`
    changeColor: (state: ColorState, action: PayloadAction<string>) => {
      state.value = action.payload;
    },
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(changeColorAsync.pending, (state) => {
        state.status = 'loading';
      })
      .addCase(changeColorAsync.fulfilled, (state, action) => {
        state.status = 'idle';
        state.value = action.payload;
      })
      .addCase(changeColorAsync.rejected, (state) => {
        state.status = 'failed';
      });
  },
});

export const { changeColor } = colorSlice.actions;

// The function below is called a selector and allows us to select a value from
// the state. Selectors can also be defined inline where they're used instead of
// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`
export const selectColor = (state: RootState) => state.color.value;

export default colorSlice.reducer;
